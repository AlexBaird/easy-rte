function abcd;
interface of abcd {
	in bool A;  
	out bool B;  
	out bool C;  
	out bool D;  
}

// On A, each policy is responsible for ensuring output (B, C, or D) is emitted

policy ab of abcd {
	states {
		b0 {
			-> b0 on (!A and !B) or (A and B);
			//-> violation on (A and !B and C and D) or (A and !B and !C and D) or (A and !B and C and !D) or (A and !B and !C and !D) recover B := 1;	
			//-> violation on (!A and B and C and D) or (!A and B and !C and D) or (!A and B and C and !D) or (!A and B and !C and !D) recover B := 0;	
			// Combine two violation transitions into one for compilation simplicity
			-> violation on (A and !B and C and D) or (A and !B and !C and D) or (A and !B and C and !D) or (A and !B and !C and !D) or (!A and B and C and D) or (!A and B and !C and D) or (!A and B and C and !D) or (!A and B and !C and !D);	
		}
	}
}
policy ac of abcd {
	states {
		c0 {
			-> c0 on (!A and !C) or (A and C);
			//-> violation on (A and !C and B and D) or (A and !C and !B and D) or (A and !C and B and !D) or (A and !C and !B and !D) recover C := 1;	
			//-> violation on (!A and C and B and D) or (!A and C and !B and D) or (!A and C and B and !D) or (!A and C and !B and !D) recover C := 0;

			// Combine two violation transitions into one for compilation simplicity
			-> violation on (A and !C and B and D) or (A and !C and !B and D) or (A and !C and B and !D) or (A and !C and !B and !D) or (!A and C and B and D) or (!A and C and !B and D) or (!A and C and B and !D) or (!A and C and !B and !D);
		}
	}
}
policy ad of abcd {
	states {
		d0 {
			-> d0 on (!A and !D) or (A and D);
			//-> violation on (A and !D and B and C) or (A and !D and !B and C) or (A and !D and B and !C) or (A and !D and !B and !C) recover D := 1;	
			//-> violation on (!A and D and B and C) or (!A and D and !B and C) or (!A and D and B and !C) or (!A and D and !B and !C) recover D := 0;	

			// Combine two violation transitions into one for compilation simplicity
			-> violation on (A and !D and B and C) or (A and !D and !B and C) or (A and !D and B and !C) or (A and !D and !B and !C) or (!A and D and B and C) or (!A and D and !B and C) or (!A and D and B and !C) or (!A and D and !B and !C);
		}
	}
}
