function ab;
interface of ab {
	out bool A;
	out bool B;
}

policy a of ab {
	states {

		a0 {
			-> a0 on ((!A and B) or (!A and !B));
			-> a2 on ((A and B) or (A and !B));
		}

		a1 {
			-> a2 on ((A and B) or (A and !B));

			-> violation on ((!A and B) or (!A and !B)) recover A := 1;	
		}

		a2 {
			-> a1 on ((!A and B) or (!A and !B));

			-> violation on ((A and B) or (A and !B)) recover A := 0;	
		}
	}
}

policy b of ab {
	states {

		b0 {
			-> b0 on ((A and !B) or (!A and !B));
			-> b2 on ((A and B) or (!A and B));
		}

		b1 {
			-> b2 on ((A and B) or (!A and B));

			-> violation on ((A and !B) or (!A and !B)) recover B := 1;	
		}

		b2 {
			-> b1 on ((A and !B) or (!A and !B));

			-> violation on ((A and B) or (!A and B)) recover B := 0;	
		}

	}
}

policy c of ab {
	states {
		c0 {
			-> c1 on ((A and !B) or (!A and !B)) or ((A and B) or (!A and B));
		}
		c1 {
			-> c0 on ((A and !B) or (!A and !B)) or ((A and B) or (!A and B));
		}
	}
}