function water;
interface of water {
    //in here means that they're going from PLANT to CONTROLLER
	in bool ID;  // Sensor identification passed
	in bool OK;  // Sensor reporting okay status

    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP; // Controller actuating pump
}

policy Sensor of water {
	states {

		//first state is initial, and represents "We're waiting for an ID event from the sensor"
		l0 {
			enforce OK := 0, ID := 0 if (OK and ID); // this needs to go first for priority
			enforce OK := 0 if OK;
			enforce PUMP := 0 if PUMP;

			-> l0 on (!ID and !OK and !PUMP);

			-> l1 on (ID and !OK and !PUMP);
			
			//-> violation on (PUMP) recover PUMP := 0;	
			//-> violation on (ID and OK) recover ID := 0, OK:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID := 0, OK := 0 if ID; // If the sensor IDs again it is considered malicious  
            enforce PUMP := 0 if !OK; // Don't pump if the sensor says dont!
			//enforce PUMP := 1 if OK; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID and OK and PUMP) or (!ID and !OK and !PUMP) or (!ID and OK and !PUMP)); // straight back to 10
		}
	}
}
