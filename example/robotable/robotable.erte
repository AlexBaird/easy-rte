function Robotable;
interface of Robotable {
	//in here means that they're going from PLANT to CONTROLLER
	//The inputs to the controller is the requested X, Y location, as well as the sensed X, Y location
	in int16_t reqLocX;  
	in int16_t reqLocY;	
	in int16_t curLocX := 0; //0, 0 is the middle of the table
	in int16_t curLocY := 0;

	//out here means that they're going from CONTROLLER to PLANT
	//The outputs from the controller are the direction controllers for X and Y.
	//These are limited to {-1, 0, 1}
	out int16_t driveX := 0;
	out int16_t driveY := 0;
}

policy stayOnTable of Robotable {
	internals {
		int16_t minX := -10;
		int16_t maxX := 10;
		int16_t minY := -10;
		int16_t maxY := 10;
	}

	states {

		s0 {
			//INPUT: ensure requested location is on the table
			-> violation on ((reqLocX < minX) or (reqLocX > maxX) or (reqLocY < minY) or (reqLocY > maxY));
			
			//INPUT: ensure sensed location is on the table
			-> violation on ((curLocX < minX) or (curLocX > maxX) or (curLocY < minY) or (curLocY > maxY));

			//OUTPUT: ensure that the current sense location augmented with the drive command does not push us off the table
			-> violation on ((curLocX + driveX) < minX) recover driveX := 0;
			-> violation on ((curLocX + driveX) > maxX) recover driveX := 0;
			-> violation on ((curLocY + driveY) < minY) recover driveY := 0;
			-> violation on ((curLocY + driveY) > maxY) recover driveY := 0;
			
			//OUTPUT: ensure that the drive command does not exceed a safe value
			-> violation on ((driveX < -1) or (driveX > 1) or (driveY < -1) or (driveY > 1));

			-> s0 on (
				(reqLocX >= minX) and (reqLocX <= maxX) and (reqLocY >= minY) and (reqLocY <= maxY) and 
				(curLocX >= minX) and (curLocX <= maxX) and (curLocY >= minY) and (curLocY <= maxY) and
				((curLocX + driveX) >= minX) and ((curLocX + driveX) <= maxX) and ((curLocY + driveY) >= minY) and ((curLocY + driveY) <= maxY)) and
				(driveX >= -1) and (driveX >= 1) and (driveY <= -1) and (driveY >= 1)
			);
		}
	}
}
